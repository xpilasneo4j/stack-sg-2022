// Cypher script to load the Person data
//
// The dataset is a list of persons with some oersonal details
// Salary, Housing, Education,...

// First let's create unique constraints for each label
CREATE CONSTRAINT personConstraint IF NOT EXISTS FOR (x:Person) REQUIRE x.id IS UNIQUE;
CREATE CONSTRAINT educationConstraint IF NOT EXISTS FOR (x:Education) REQUIRE x.education_level IS UNIQUE;
CREATE CONSTRAINT jobConstraint IF NOT EXISTS FOR (x:Job) REQUIRE x.title IS UNIQUE;
CREATE CONSTRAINT housingConstraint IF NOT EXISTS FOR (x:Housing) REQUIRE x.name IS UNIQUE;
CREATE CONSTRAINT housingTypeConstraint IF NOT EXISTS FOR (x:Housing_Type) REQUIRE x.name IS UNIQUE;
// TO ADD MORE...

// TO BE REMOVED AFTER TESTING
// LOAD CSV WITH HEADERS FROM 'file:///person.csv' AS row WITH row
LOAD CSV WITH HEADERS FROM 'https://raw.githubusercontent.com/xpilasneo4j/stack-sg-2022/main/data/person.csv' AS row WITH row
MERGE (p:Person {id: toInteger(row.id)})
SET p.age = toInteger(row.age)
MERGE (e:Education { education_level: row.education_level})
MERGE (j:Job { title: row.job})
MERGE (h:Housing { name: row.housing})
MERGE (ht:Housing_Type { name: row.housing_type})
MERGE (p)-[:GRADUATED_WITH]->(e)
MERGE (p)-[wa:WORKS_AS]->(j)
SET wa.salary = toInteger(row.salary)
MERGE (p)-[:OWNS_HOUSING_TYPE]->(ht)
MERGE (p)-[:LIVES_IN]->(h)
WITH row, p, ht
MATCH (p)-[:OWNS_HOUSING_TYPE]->(ht)
MERGE (ht)-[:LIVING_IN]-(h)
WITH row, p
WHERE row.car_ownership = 'True'
MERGE (c:Car { name: row.car})
MERGE (p)-[:OWNS_CAR]->(c)
WITH row, p
WHERE row.pet_ownership = 'True' AND row.pet IS NOT NULL
MERGE (pe:Pet { pet: row.pet})
MERGE (p)-[:OWNS_PET]->(pe);

// QUERIES
// Retrieve all Person Node
MATCH (p:Person) RETURN p;

// Retrieve a Person node with a specific property, e.g. id 1
MATCH (p:Person { id: 1 }) RETURN p;

// What's the salary of Person with id 1
MATCH (p:Person { id: 1 })-[wa:WORKS_AS]->()
RETURN p.id, wa.salary;

// Who earns the highest salary? Return the Person's id and the Salary.
MATCH (p:Person)-[wa:WORKS_AS]-()
RETURN wa.salary as salary, p.id as id
ORDER BY salary DESC LIMIT 1;

// How many people own a pet?
MATCH (p:Person)-[:OWNS_PET]->(n:Pet) 
RETURN count(p) AS count_person_pet;

// How many people own a BMW?
MATCH (p:Person)-[:OWNS_CAR]-(c:Car { name: "BMW"}) 
RETURN count(p) AS count_person_car;

// How many people owns both a dog and a car?
MATCH (c:Car)<-[:OWNS_CAR]-(p:Person)-[:OWNS_PET]->(pe:Pet { pet: "Dog"}) 
RETURN count(p);

// How many people earn more than 10000 and live in a private property and do not have a degree
MATCH (h)<-[:OWNS_HOUSING_TYPE]-(p:Person)-[wa:WORKS_AS]->()
WHERE wa.salary > 10000 AND h.name = "Private" AND NOT exists {(p)-[:GRADUATED_WITH]->(e:Education) WHERE e.education_level ENDS WITH "Degree"}
RETURN count(p) as count_person;